投稿詳細ページをつくる。
テーブル作成時に自動作成されたカラムたちを確認してみる。

idカラム：データベースに保存される時に数字が自動で入ります。
　　　　　idは1から順に入っていき、データ毎に重複しないようになっています。

created_at、updated_atカラム：データベースに保存された時刻が自動で入るようになっています。
　　　　　　　　　　　　　　　　updated_atはデータ更新時にも時刻が更新されます。

##############################################################################################
find_byメソッド:特定のidの投稿を取得する。
　　　　　　　　ある条件に合致するデータを取得することができます。
　　　　　　　　「モデル名.find_by(カラム名: 値)」とすることで、その値を持ったデータをデータベースから取得することができます。

[1] pry(main)> post=Post.find_by(id:3）

#############################################################################################################

ルーティングのURL部分に「:」を用いて「posts/:id」と指定することで、「/posts/1」でも「/posts/2」でも
showアクションにいくようにすることができます。「posts/:id」と書くと「/posts/◯◯」のような全てのURLが該当します。

「posts/:id」というルーティングは「posts/index」より下に書かなければいけません。
ルーティングは合致するURLを上から順に探します。

#controller.rb
def show
end
#routes.rb
get "posts/:id"=>"posts#show"

###############################################################################################################
コントローラのアクション内では、ルーティングで設定したURLの「:id」の値を取得することができます。
その値はparamsという変数にハッシュとして入っています。
params[:id]とすることで、その値を取得することができます。

#posts_controller.rb
#  def show
#   @id=params[:id]
#  end

#show.html.erb
#<%="idが「#{@id}」の投稿詳細画面です"%>

############################################################################################################

詳細ページい投稿を表示していく。
showアクションで変数@postを定義し、idカラムの値がparams[:id]と等しい投稿をデータベースから取得して代入します。
@postをshow.html.erbで表示することで、各URLに対応した投稿のデータが表示されるようにしましょう！

#posts_controller.rb
def show
    @post=Post.find_by(id:params[:id]) #idカラムがparams[:id]である投稿データを取得
  end

#show.html.erb
<div class="post-time">
<%= @post.created_at%>
</div>

################################################################################################################

投稿の詳細画面へのリンクを作りたい！

<div class="posts-index-item">
<%= link_to(post.content,"/posts/#{post.id}" )%>
　　　　　　　　　　　　　　　　　　→変数展開（変数を代入している値に置き換えて、文字列の中に含めること）
                                  ""だけだと文字になっちゃうので注意
</div>

              #link_to（文字、url）

###############################################################################################################

新規投稿したい

「localhost:3000/posts/new」というURLでアクセスできるようにしましょう。
そのためにルーティング、アクション、ビューを追加しましょう。
アクションは、newアクションとしましょう。

#############################################################################################################

入力フォームをつくりたーい
<textarea>タグや<input>タグを用いることで入力フォームを作成することができます。
送信ボタンにはtype="submit"と、value="投稿"を指定することに気をつけましょう。

##############################################################################################################

投稿を保存したーい
フォームの投稿ボタンを押すと、Rails側に投稿データが送信されます。
今回はcreateアクションを用意して、受け取った投稿データをデータベースに保存するようにします。
createアクションのURLは「/posts/create」としましょう。

今までルーティングを書く際に「get」と書いてきましたが、フォームの値を受け取る場合は「post」とする必要があります。
（この「post」はPostモデルの「Post」とは関係ありません。）
通常は「get」、フォームの値を受け取るときは「post」というように覚えておきましょう。

form_tagメソッド
フォームに入力されたデータを送信することができます。
「form_tag(送信先のURL) do」
    これによって、<input type="submit" ...>のボタンを押した時に、指定されたURLにデータが送信されます。

###############################################################################################################

redirect_toメソッド
他のURLに転送（リダイレクト）するには、を用います。
redirect_toは「redirect_to(URL)」とすることで、そのページに転送することができます。

def create
  redirect_to("/posts/index")
end

##################################################################################################################

送信されてきた投稿をデータベースに保存する。
→投稿をcreatアクションに送信すればできる

<textarea>タグにname属性を指定すると、入力データを送信することができるようになり、
name属性の値をキーとしたハッシュがRails側に送られます。

<div class="form">
          <textarea name="content"></textarea>
          <input type="submit" value="投稿">
        </div>

        ↓ブラウザで投稿ボタンを押すと
        　｛name属性:"入力内容"｝←今回は｛content:"Rails勉強中！"｝
       　↓ creatアクションに送られる

       
          # フォームから送信されたデータを受け取り、保存する処理
        def create
          @post=Post.new(content:params[:content])　#()内ではcontentが入力データであるインスタンスを作成している
          　　　　　　　　　　　　　#params[:content]にはcontent:"rails勉強中！"というハッシュが代入されている
          @post.save
          redirect_to("/posts/index")
        end

 #paramsは以下の2通りの使い方があるので、整理して覚えておきましょう。
 #①「:○○」を使ったルーティングのURLから値を取得する
    get "/posta/:●●"=>.... 
 #②「name="○○"」が付いたフォームの入力内容を受け取る
    <textarea name="●●" ></textarea>

###################################################################################################################

投稿を並び変えたい

orderメソッド
投稿一覧を並び替えることができます。
order(カラム名: 並び替えの順序）のように使います。並び替えの順序には、昇順（:asc）と降順（:desc）のどちらかを指定できます。
created_atを基準に降順（:desc）に並べ替えると、新しいものから順番に表示するようにできます。

def index
  @posts = Post.all.order(created_at: :desc)　#:descの塊なので：が二つ並ぶよ
end










